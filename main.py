import logging
import asyncio
import sqlite3
from datetime import datetime
from aiogram.dispatcher.filters import Command
from aiogram.types import ContentType
from aiogram import Bot, Dispatcher, types, executor
from collections import defaultdict
from datetime import datetime, timedelta

API_TOKEN = 'API_TOKEN'
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect('bot_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS chat_last_message (
                    chat_id INTEGER PRIMARY KEY,
                    last_message_time TEXT)''')

conn.commit()


@dp.message_handler(Command("help"))
async def process_broadcast_command(message: types.Message):
    chat_id = message.chat.id
    conn = sqlite3.connect('bot_database.db')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    c = conn.cursor()
    c.execute("SELECT * FROM chat_last_message WHERE chat_id = ?", (chat_id,))
    
    if (c.fetchone()):
        c.execute("REPLACE INTO chat_last_message (chat_id, last_message_time) VALUES (?, ?)",(chat_id, str(datetime.now())))  # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Ç–∞–±–ª–∏—Ü—É
    else:
        c.execute("INSERT INTO chat_last_message (chat_id, last_message_time) VALUES (?, ?)", (chat_id, str(datetime.now())))
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    
    await message.reply("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")


async def update_last_message_time(chat_id):
    conn = sqlite3.connect('bot_database.db')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    c = conn.cursor()
    c.execute("SELECT * FROM chat_last_message WHERE chat_id = ?", (chat_id,))
    
    if (c.fetchone()):
        c.execute("REPLACE INTO chat_last_message (chat_id, last_message_time) VALUES (?, ?)",(chat_id, str(datetime.now())))  # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Ç–∞–±–ª–∏—Ü—É
    else:
        c.execute("INSERT INTO chat_last_message (chat_id, last_message_time) VALUES (?, ?)", (chat_id, str(datetime.now())))
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    
@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def greet_new_members(message: types.Message):
    chat_id = message.chat.id
    conn = sqlite3.connect('bot_database.db')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    c = conn.cursor()
    c.execute("SELECT * FROM chat_last_message WHERE chat_id = ?", (chat_id,))
    
    if (c.fetchone()):
        c.execute("REPLACE INTO chat_last_message (chat_id, last_message_time) VALUES (?, ?)",(chat_id, str(datetime.now())))  # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Ç–∞–±–ª–∏—Ü—É
    else:
        c.execute("INSERT INTO chat_last_message (chat_id, last_message_time) VALUES (?, ?)", (chat_id, str(datetime.now())))
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    


async def get_last_message_time(chat_id):
    conn = sqlite3.connect('bot_database.db')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    c = conn.cursor()
    c.execute("SELECT last_message_time FROM chat_last_message WHERE chat_id = ?",
    (chat_id,))
    result = c.fetchone()
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    
    if result:
        return datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S.%f')
    return None

async def send_reminder(chat_id):
    await bot.send_message(chat_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n–ö–∞–∫ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞?\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–∞–≤–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –∏ –¥–∏–Ω–∞–º–∏–∫–µ –æ–±—É—á–µ–Ω–∏—è. \
    –≠—Ç–æ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π –º—ã –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏–¥—ë–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É üôè \n\n(—Ç–∞–π–º–µ—Ä 2 —á–∞—Å–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω)")

@dp.message_handler()
async def reminder_handler(message: types.Message):
    chat_id = message.chat.id
    await update_last_message_time(chat_id)

async def check_last_message_times():
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        current_time = datetime.now()
        
        conn = sqlite3.connect('bot_database.db')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        c = conn.cursor()
        c.execute("SELECT chat_id FROM chat_last_message")
        chat_ids = [record[0] for record in c.fetchall()]
        conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

        for chat_id in chat_ids:
            last_message_time = await get_last_message_time(chat_id)
            if last_message_time:
                time_difference = current_time - last_message_time
                if time_difference >= timedelta(minutes=120):
                    conn = sqlite3.connect('bot_database.db')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    c = conn.cursor()
                    c.execute("REPLACE INTO chat_last_message (chat_id, last_message_time) VALUES (?, ?)",(chat_id, str(datetime.now())))  # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Ç–∞–±–ª–∏—Ü—É
                    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    
                    try:
                        await send_reminder(chat_id)
                    except:
                        continue


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_last_message_times())
    loop.create_task(dp.start_polling())
    loop.run_forever()
